{
	"schema": "sai-1",

	# We're doing separate install into destdir so that the test server
	# has somewhere to go to find its /usr/share content like certs

	"platforms": {
		"linux-ubuntu-bionic-amd64": {
			"build": "mkdir build destdir;cd build;export CCACHE_DISABLE=1;export SAI_CPACK=\"-G DEB\";cmake .. ${cmake} && make -j && make -j DESTDIR=../destdir install && ctest -j4 --output-on-failure ${cpack}"
		},
		"linux-ubuntu-focal-amd64": {
			"build": "mkdir build destdir;cd build;export CCACHE_DISABLE=1;export SAI_CPACK=\"-G DEB\";cmake .. ${cmake} && make -j && make -j DESTDIR=../destdir install && ctest -j4 --output-on-failure ${cpack}"
		},
		"linux-fedora-32-x86_64": {
			"build": "mkdir build destdir;cd build;export CCACHE_DISABLE=1;export SAI_CPACK=\"-G RPM\";cmake .. ${cmake} && make -j && make -j DESTDIR=../destdir install && ctest -j4 --output-on-failure ${cpack}"
		},
		"linux-centos-8-x8664": {
			"build": "mkdir build destdir;cd build;export CCACHE_DISABLE=1;export SAI_CPACK=\"-G RPM\";cmake .. ${cmake} && make -j && make -j DESTDIR=../destdir install && ctest -j4 --output-on-failure ${cpack}"
		},
		"linux-debian-buster-arm32": {
			"build": "mkdir build;cd build;export CCACHE_DISABLE=1;export SAI_CPACK=\"-G DEB\";cmake .. ${cmake} && make -j3 && make -j DESTDIR=../destdir install && ctest -j3 --output-on-failure ${cpack}",
			"default": false
		},
		"android-aarch64": {
			"build": "mkdir build;cd build;cmake .. -DCMAKE_TOOLCHAIN_FILE=../libwebsockets/contrib/cross-aarch64-android.cmake ${cmake} && make -j",
			"default": false
		},
		"iOS": {
			"build": "mkdir build destdir; cd build; export SAI_CPACK=\"-G ZIP\";cmake .. -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DCMAKE_IOS_DEVELOPER_ROOT=/opt/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer -DCMAKE_TOOLCHAIN_FILE=contrib/iOS.cmake -DIOS_PLATFORM=OS ${cmake} && make -j",
			"default": false
		},
		"OSX-catalina": {
			"build": "mkdir build destdir; cd build; export SAI_CPACK=\"-G ZIP\";export MACOSX_DEPLOYMENT_TARGET=10.14 ; cmake .. -DCMAKE_MAKE_PROGRAM=/usr/bin/make -DLWS_OPENSSL_INCLUDE_DIRS=/usr/local/opt/openssl@1.1/include -DLWS_OPENSSL_LIBRARIES=\"/usr/local/opt/openssl/lib/libssl.dylib;/usr/local/opt/openssl/lib/libcrypto.dylib\" ${cmake} && make -j && make -j DESTDIR=../destdir install && ctest -j4 --output-on-failure ${cpack}"
		},

		"linkit-cross": {
			"build": "mkdir build;cd build;export CCACHE_DISABLE=1;cmake .. -DCMAKE_INSTALL_PREFIX:PATH=/tmp -DCMAKE_TOOLCHAIN_FILE=../contrib/cross-linkit.cmake -DLWS_PLAT_FREERTOS=1 -DLWS_WITH_ZLIB=0 -DLWS_WITHOUT_EXTENSIONS=1 -DLWS_WITH_ZIP_FOPS=0 -DLWS_WITH_HTTP_STREAM_COMPRESSION=0 -DLWS_WITH_MBEDTLS=1 -DLWS_WITH_FILE_OPS=0 ${cmake};make -j",
			"default": false
		},
		"windows-10": {
			"build": "mkdir build && cd build && set SAI_CPACK=\"-G ZIP\" && cmake .. -DLWS_EXT_PTHREAD_INCLUDE_DIR=\"C:\\Program Files (x86)\\pthreads\\include\" -DLWS_EXT_PTHREAD_LIBRARIES=\"C:\\Program Files (x86)\\pthreads\\lib\\x64\\libpthreadGC2.a\" ${cmake} && cmake --build . --config DEBUG && set CTEST_OUTPUT_ON_FAILURE=1 && ctest . -C DEBUG -j4 --output-on-failure",
			"default": false
		},
		"freertos-esp32": {
			# official way to get sdkconfig.h is idf.py menuconfig, but
			# no obvious way to do that in CI
			"build":	"rm -rf ebuild ; mkdir ebuild; cd ebuild; cp -rp ../minimal-examples/embedded/lws-minimal-esp32 . ;  cd lws-minimal-esp32 ; . /opt/esp/esp-idf/export.sh ; ln -sf ../.. libwebsockets ; idf.py set-target esp32 && cp libwebsockets/minimal-examples/embedded/lws-minimal-esp32/sdkconfig . && cp sdkconfig.h build && idf.py build && cd build && /usr/local/bin/sai-device freertos-esp32 ESPPORT=0 ctest --output-on-failure",
			"default":	false
		}
	},

	"configurations": {
		"default": {
			"cmake":	"",
			"platforms":	"windows-10, linkit-cross, linux-debian-buster-arm32, freertos-esp32"
		},
		"default-examples": {
			"cmake":	"-DLWS_WITH_MINIMAL_EXAMPLES=1",
			"platforms":	"windows-10, linux-debian-buster-arm32"
		},
		"lws_system": {
			"cmake":	"-DLWS_WITH_ACME=1 -DLWS_WITH_MINIMAL_EXAMPLES=1 -DCMAKE_BUILD_TYPE=RELEASE -DLWS_WITH_GENCRYPTO=1 -DLWS_WITH_JOSE=1 -DLWS_WITH_SYS_ASYNC_DNS=1 -DLWS_WITH_SYS_NTPCLIENT=1",
			"platforms":	"windows-10"
		},
		"secure-streams": {
			"cmake":	"-DLWS_WITH_SECURE_STREAMS=1",
			"platforms":	"windows-10"
		},
		"secure-streams-proxy": {
			"cmake":	"-DLWS_WITH_SECURE_STREAMS=1 -DLWS_WITH_SECURE_STREAMS_PROXY_API=1",
			"platforms":	"not windows-10"
		},
		"distro_recommended": {
			"cmake":	"-DLWS_WITH_DISTRO_RECOMMENDED=1",
			"platforms":	"not linkit-cross, not windows-10, linux-debian-buster-arm32",
			"cpack":	"&& cpack $SAI_CPACK",
			"artifacts":	"build/*.rpm, build/*.deb, build/*.zip"
		},
		"lwsws": {
			"cmake":	"-DLWS_WITH_LWSWS=ON -DLWS_WITHOUT_EXTENSIONS=0 -DLWS_WITH_HTTP2=1 -DLWS_WITH_ACME=1 -DLWS_WITH_MINIMAL_EXAMPLES=1 -DCMAKE_BUILD_TYPE=DEBUG -DLWS_WITH_GENCRYPTO=1 -DLWS_WITH_JOSE=1 -DLWS_WITH_SYS_ASYNC_DNS=1 -DLWS_WITH_SYS_NTPCLIENT=1",
			# no distro -devel package for libuv
			"platforms":	"not linux-centos-8-x8664"
		},
		"lwsws2": {
			"cmake":	"-DLWS_WITH_LWSWS=ON -DLWS_WITHOUT_EXTENSIONS=0 -DLWS_WITH_HTTP2=1 -DLWS_WITH_ACME=1 -DLWS_WITH_MINIMAL_EXAMPLES=1 -DCMAKE_BUILD_TYPE=DEBUG -DLWS_WITH_LWS_DSH=1",
			# no distro -devel package for libuv
			"platforms":	"not linux-centos-8-x8664"
		},
		"justmbedtls": {
			"cmake": "-DLWS_WITH_MBEDTLS=1 -DLWS_WITHOUT_TESTAPPS=1",
			"platforms": "none, android-aarch64"
		},
		"mbedtls": {
			"cmake":	"-DLWS_WITH_MBEDTLS=1 -DLWS_WITH_HTTP2=1 -DLWS_WITH_LWSWS=1 -DLWS_WITH_MINIMAL_EXAMPLES=1 -DLWS_WITH_JOSE=1 -DCMAKE_BUILD_TYPE=DEBUG",
			# no distro -devel package for mbedtls
			"platforms":	"not linux-centos-8-x8664"
		},
		"noserver": {
			"cmake":	"-DLWS_WITHOUT_SERVER=ON -DLWS_WITH_MINIMAL_EXAMPLES=1"
		},
		"noclient": {
			"cmake":	"-DLWS_WITHOUT_CLIENT=ON -DLWS_WITH_MINIMAL_EXAMPLES=1"
		},
		"ext": {
			"cmake":	"-DLWS_WITHOUT_EXTENSIONS=0 -DLWS_WITH_MINIMAL_EXAMPLES=1"
		},
		"nonetwork": {
			"cmake":	"-DLWS_WITH_NETWORK=0"
		},
		"libev": {
			"cmake":	"-DLWS_WITH_LIBEV=ON"
		},
		"libevent": {
			"cmake":	"-DLWS_WITH_LIBEVENT=ON"
		},
		"libglib": {
			"cmake":	"-DLWS_WITH_GLIB=ON"
		},
		"ipv6":	{
			"cmake":	"-DLWS_IPV6=ON",
			"platforms":	"windows-10"
		},
		"nossl": {
			"cmake":	"-DLWS_WITH_SSL=OFF",
			"platforms":	"iOS"
		},
		"daemon": {
			"cmake":	"-DLWS_WITHOUT_DAEMONIZE=OFF"
		},
		"cgi": {
			"cmake":	"-DLWS_WITH_CGI=ON"
		},
		"nologs": {
			"cmake":	"-DLWS_WITH_NO_LOGS=ON"
		},
		"smp": {
			"cmake":	"-DLWS_MAX_SMP=32 -DLWS_WITH_MINIMAL_EXAMPLES=1"
		},
		"nows": {
			"cmake":	"-DLWS_ROLE_WS=0"
		},
		"threadpool": {
			"cmake":	"-DLWS_WITH_THREADPOOL=1 -DLWS_WITH_MINIMAL_EXAMPLES=1",
			"platforms":	"windows-10"
		}
	}
}

